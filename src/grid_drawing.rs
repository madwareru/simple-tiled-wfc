use crate::B256;

pub const CENTRAL_ID: usize = 7;
pub const DRAW_RADIUS_OFFSETS: [usize; 7] = [1, 1, 2, 3, 4, 5, 6];

pub const DRAW_LOOKUP: [B256; 7] = [
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__0,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__0,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__1__1__0__0__0,0b0__0__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__1__0__0__0__0,0b0__0__0__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ],
    [
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__0__0__0__0__0__0__0,0b0__0__0__0__0__0__1__1,
        0b1__0__0__0__0__0__0__0,0b0__0__0__0__0__0__1__1,
        0b1__0__0__0__0__0__0__0,0b0__0__0__0__0__0__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__0__0__0__0__0__0,0b0__0__0__0__0__1__1__1,
        0b1__1__1__0__0__0__0__0,0b0__0__0__0__1__1__1__1,
        0b1__1__1__1__1__1__0__0,0b0__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1,
        0b1__1__1__1__1__1__1__1,0b1__1__1__1__1__1__1__1
    ]
];

pub fn get_brush_ranges(
    row_center: usize,
    column_center: usize,
    brush_id:usize,
    width: usize,
    height: usize
) -> (
    std::ops::RangeInclusive<usize>,
    std::ops::RangeInclusive<usize>,
    std::ops::RangeInclusive<usize>,
    std::ops::RangeInclusive<usize>
) {
    assert!(width > 0 && height > 0);
    let left = (column_center as i32 - DRAW_RADIUS_OFFSETS[brush_id] as i32).max(0) as usize;
    let right = column_center + DRAW_RADIUS_OFFSETS[brush_id].min(width-1) as usize;
    let top = (row_center as i32 - DRAW_RADIUS_OFFSETS[brush_id] as i32).max(0) as usize;
    let bottom = row_center + DRAW_RADIUS_OFFSETS[brush_id].min(height-1) as usize;

    let (horizontal_range_max, vertical_range_max) = (
        left..=right,
        top..=bottom
    );

    let local_left = CENTRAL_ID - (column_center - horizontal_range_max.start());
    let local_right = CENTRAL_ID + horizontal_range_max.end() - column_center;
    let local_top = CENTRAL_ID - (row_center - vertical_range_max.start());
    let local_bottom = CENTRAL_ID + vertical_range_max.end() - row_center;

    (
        horizontal_range_max,
        vertical_range_max,
        local_left..=local_right,
        local_top..=local_bottom
    )
}